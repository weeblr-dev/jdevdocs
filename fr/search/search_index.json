{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue sur la Documentation Joomla pour les d\u00e9veloppeurs This website provides developer documentation for the Joomla CMS . It is a collaborative effort and is constantly updated for accuracy. You too can contribute to this documentation for the benefit of us all. It can be just fixing a small typo, or maybe document a complete Joomla API. Visit the How to contribute page for learn how to do that. All it takes is a Github account! This developer documentation is meant for people wanting to develop extensions for Joomla . It is meant for programmers and users who want to learn Joomla custom extensions development. To learn how to use or manage Joomla websites, please visit the Joomla documentation website","title":"Home"},{"location":"#bienvenue-sur-la-documentation-joomla-pour-les-developpeurs","text":"This website provides developer documentation for the Joomla CMS . It is a collaborative effort and is constantly updated for accuracy. You too can contribute to this documentation for the benefit of us all. It can be just fixing a small typo, or maybe document a complete Joomla API. Visit the How to contribute page for learn how to do that. All it takes is a Github account! This developer documentation is meant for people wanting to develop extensions for Joomla . It is meant for programmers and users who want to learn Joomla custom extensions development. To learn how to use or manage Joomla websites, please visit the Joomla documentation website","title":"Bienvenue sur la Documentation Joomla pour les d\u00e9veloppeurs"},{"location":"contribute/","text":"General workflow The documentation content is built with Mkdocs and the Mkdocs Material theme . Essentially, the documentation is made of simple text files in the Markdown format, located inside a hierarchy of directories. Please refer to the Mkdocs Material theme documentation for how to write and format your content. New content, or changes to existing content is done in the same way code is modified: fork this repository make changes / add content in your fork submit a Pull Request to this repo. Tools and Requirements The only thing absolutely required to make contribute to the documentation project is a Github account . You can make simple changes directly on the Github.com website, after forking the documentation repository. For more complex changes, or simply more convience, use your regular git development workflow, with your preferred IDE (VSCode, Jetbrains IDES, Sublime Text,etc) Building and publishing Once your proposed changes have been submitted through a Pull Request, an administrator will review them and, if accepted, merge them into the main branch. This process of building and publishing the updated documentation is automated using: Github actions for the build process: see /.github/workflows/ci.yml for configuration. Mkdocs Material configuration file located at mkdocs.yml , per language. Unless you are an administrator of this project, only change documentation content, located inside of the /<language code>/docs directory. Content in other directories is for building the documentation and publishing it automatically, it should not be modified unless by administrators. Pull Request attempting to change content outside of /<language code>/docs will likely not be accepted.","title":"How to contribute"},{"location":"contribute/#general-workflow","text":"The documentation content is built with Mkdocs and the Mkdocs Material theme . Essentially, the documentation is made of simple text files in the Markdown format, located inside a hierarchy of directories. Please refer to the Mkdocs Material theme documentation for how to write and format your content. New content, or changes to existing content is done in the same way code is modified: fork this repository make changes / add content in your fork submit a Pull Request to this repo.","title":"General workflow"},{"location":"contribute/#tools-and-requirements","text":"The only thing absolutely required to make contribute to the documentation project is a Github account . You can make simple changes directly on the Github.com website, after forking the documentation repository. For more complex changes, or simply more convience, use your regular git development workflow, with your preferred IDE (VSCode, Jetbrains IDES, Sublime Text,etc)","title":"Tools and Requirements"},{"location":"contribute/#building-and-publishing","text":"Once your proposed changes have been submitted through a Pull Request, an administrator will review them and, if accepted, merge them into the main branch. This process of building and publishing the updated documentation is automated using: Github actions for the build process: see /.github/workflows/ci.yml for configuration. Mkdocs Material configuration file located at mkdocs.yml , per language. Unless you are an administrator of this project, only change documentation content, located inside of the /<language code>/docs directory. Content in other directories is for building the documentation and publishing it automatically, it should not be modified unless by administrators. Pull Request attempting to change content outside of /<language code>/docs will likely not be accepted.","title":"Building and publishing"},{"location":"getting-started/joomla-dev-best-practises/","text":"Overview Here are a collection of the Joomla! Development practices you should observe when developing a component, plugin or module for Joomla. General Development Guidelines Don't use the DS or DIRECTORY_SEPARATOR constant when including files. It is no longer needed, as pointed out by Christian on php.net Don't depend on register_globals . This is a HIGH security risk, and the feature has been deprecated in PHP 5.3 and removed in 5.4. Don't access the $_GET , $_POST , $_REQUEST , $_FILES and $_SERVER superglobals directly. Use JInput (typically: JFactory::getApplication()->input ) instead. JInput filters the input, helping you to easily write more secure software. Don't hardcode your SQL queries and do not include unescaped raw data into them. Always use JDatabase / JDatabaseQuery . It's as simple as JFactory::getDbo()->getQuery(true) . Don't use arbitrary entry points, i.e. .php files which must be accessible outside Joomla!, directly from the web. Typically used to accommodate for payment processors and image resizers, this practice is extremely insecure and strongly discouraged. Use a Joomla! component or a system plugin instead. Don't reinvent the wheel. If there's a Joomla! class to do that try using it before you roll your own. Chances are the core class is already good enough and much better tested. Do use sensible prefixes for your table names. If your component is called com_foobar it stands to reason that its tables follow the naming pattern: // Good #__foobar_something // Bad #__fbr_something //Really Bad! #__something Do test your extensions with pre-release versions of Joomla! and/or the \"staging\" branch of the Git repository. Making sure that users of your extension can update Joomla! safely is your responsibility. Do provide documentation for your extensions. Even a short video with less than stellar English is better than nothing. Do use JText to translate the output of your extension instead of hardcoding text. The vast majority of Joomla! users are not native English speakers and they will thank you for your consideration. Do comment your code. Not just for the people who have to work with it, but also yourself six months from now. Do test your code under real usage conditions, with real world data sets. You might be surprised at what you find.","title":"Best practices"},{"location":"getting-started/joomla-dev-best-practises/#overview","text":"Here are a collection of the Joomla! Development practices you should observe when developing a component, plugin or module for Joomla.","title":"Overview"},{"location":"getting-started/joomla-dev-best-practises/#general-development-guidelines","text":"Don't use the DS or DIRECTORY_SEPARATOR constant when including files. It is no longer needed, as pointed out by Christian on php.net Don't depend on register_globals . This is a HIGH security risk, and the feature has been deprecated in PHP 5.3 and removed in 5.4. Don't access the $_GET , $_POST , $_REQUEST , $_FILES and $_SERVER superglobals directly. Use JInput (typically: JFactory::getApplication()->input ) instead. JInput filters the input, helping you to easily write more secure software. Don't hardcode your SQL queries and do not include unescaped raw data into them. Always use JDatabase / JDatabaseQuery . It's as simple as JFactory::getDbo()->getQuery(true) . Don't use arbitrary entry points, i.e. .php files which must be accessible outside Joomla!, directly from the web. Typically used to accommodate for payment processors and image resizers, this practice is extremely insecure and strongly discouraged. Use a Joomla! component or a system plugin instead. Don't reinvent the wheel. If there's a Joomla! class to do that try using it before you roll your own. Chances are the core class is already good enough and much better tested. Do use sensible prefixes for your table names. If your component is called com_foobar it stands to reason that its tables follow the naming pattern: // Good #__foobar_something // Bad #__fbr_something //Really Bad! #__something Do test your extensions with pre-release versions of Joomla! and/or the \"staging\" branch of the Git repository. Making sure that users of your extension can update Joomla! safely is your responsibility. Do provide documentation for your extensions. Even a short video with less than stellar English is better than nothing. Do use JText to translate the output of your extension instead of hardcoding text. The vast majority of Joomla! users are not native English speakers and they will thank you for your consideration. Do comment your code. Not just for the people who have to work with it, but also yourself six months from now. Do test your code under real usage conditions, with real world data sets. You might be surprised at what you find.","title":"General Development Guidelines"},{"location":"getting-started/secure-coding-guidelines/","text":"Overview Joomla includes many features that help with the task of securing applications and extensions built on it. You should always use these features if at all possible as they have been tried and tested by the many eyes of the developer community and any updates that might conceivably be required in the future will be automatically available whenever a Joomla update is applied. What follows is a description of best practice in using the Joomla API to ensure that your extensions are as secure as possible. Getting data from the request All input originating from a user must be considered potentially dangerous and must be cleaned before being used. You should always use the Joomla JInput class to retrieve data from the request, rather than the raw $_GET , $_POST or $_REQUEST variables as the JInput methods apply input filtering by default. JInput deals with all aspects of the user request in a way that is independent of the request method used. It can also be used to retrieve cookie data and even server and environment variables. However, it is important to use the correct JInput method to ensure maximum security. It is very easy to just use the JInput->get() method with default parameters and ignore the fact that in many cases it is possible to apply a more stringent requirement on user input. It very important to understand that the JInput methods are not SQL-aware and further work is required to guard against SQL injection attacks.There is no default value that will be returned if no default is specified in the call the JInput->get() . If no default is specified and the argument is not present in the request variable then it will return undefined. Using JInput also obviates the need to pay attention to the setting of magic_quotes_gpc. JInput does the right thing, regardless of whether magic_quotes_gpc is on or off. See http://php.net/manual/en/security.magicquotes.php for further information. When considering user input you should think about the data type you are expecting to retrieve and apply the most stringent form of JInput that is applicable in each case. In particular, avoid the lazy approach of using JInput ->get as this will return an array that may contain entries that you did not expect and although each of those entries will have been cleaned, it is often the case that additional filtering could have been applied to some individual arguments. For example, the get method treats all arguments as strings, whereas it may be possible to restrict some arguments to be integers. The first three parameters of each of the JInput get methods are the same. Only the first parameter is mandatory. In general, the format is: JFactory::getApplication->input-><data-source>->get<type>( <name>, <default> ) where: Argument Description <type> the data type to be retrieved (see below for the types available) name the name of the variable to be retrieved (for example, the name of an argument in a URL) default the default value. <data-source> specifies where the variable is to be retrieved from (see below) Filter options All input values can be filtered using JFilterInput->clean() . Filter an array of values. $data = JFactory::getApplication()->input->post->get('data', array(), 'array'); $filter = JFilterInput::getInstance(); foreach ($data as $value) { $array[] = $filter->clean($value, 'string'); } For more filter types see JFilterInput source .","title":"Secure coding"},{"location":"getting-started/secure-coding-guidelines/#overview","text":"Joomla includes many features that help with the task of securing applications and extensions built on it. You should always use these features if at all possible as they have been tried and tested by the many eyes of the developer community and any updates that might conceivably be required in the future will be automatically available whenever a Joomla update is applied. What follows is a description of best practice in using the Joomla API to ensure that your extensions are as secure as possible.","title":"Overview"},{"location":"getting-started/secure-coding-guidelines/#getting-data-from-the-request","text":"All input originating from a user must be considered potentially dangerous and must be cleaned before being used. You should always use the Joomla JInput class to retrieve data from the request, rather than the raw $_GET , $_POST or $_REQUEST variables as the JInput methods apply input filtering by default. JInput deals with all aspects of the user request in a way that is independent of the request method used. It can also be used to retrieve cookie data and even server and environment variables. However, it is important to use the correct JInput method to ensure maximum security. It is very easy to just use the JInput->get() method with default parameters and ignore the fact that in many cases it is possible to apply a more stringent requirement on user input. It very important to understand that the JInput methods are not SQL-aware and further work is required to guard against SQL injection attacks.There is no default value that will be returned if no default is specified in the call the JInput->get() . If no default is specified and the argument is not present in the request variable then it will return undefined. Using JInput also obviates the need to pay attention to the setting of magic_quotes_gpc. JInput does the right thing, regardless of whether magic_quotes_gpc is on or off. See http://php.net/manual/en/security.magicquotes.php for further information. When considering user input you should think about the data type you are expecting to retrieve and apply the most stringent form of JInput that is applicable in each case. In particular, avoid the lazy approach of using JInput ->get as this will return an array that may contain entries that you did not expect and although each of those entries will have been cleaned, it is often the case that additional filtering could have been applied to some individual arguments. For example, the get method treats all arguments as strings, whereas it may be possible to restrict some arguments to be integers. The first three parameters of each of the JInput get methods are the same. Only the first parameter is mandatory. In general, the format is: JFactory::getApplication->input-><data-source>->get<type>( <name>, <default> ) where: Argument Description <type> the data type to be retrieved (see below for the types available) name the name of the variable to be retrieved (for example, the name of an argument in a URL) default the default value. <data-source> specifies where the variable is to be retrieved from (see below)","title":"Getting data from the request"},{"location":"getting-started/secure-coding-guidelines/#filter-options","text":"All input values can be filtered using JFilterInput->clean() . Filter an array of values. $data = JFactory::getApplication()->input->post->get('data', array(), 'array'); $filter = JFilterInput::getInstance(); foreach ($data as $value) { $array[] = $filter->clean($value, 'string'); } For more filter types see JFilterInput source .","title":"Filter options"},{"location":"getting-started/workstation/","text":"This page is centered around developing on and with Joomla. If you find yourself stuck following any of these tutorials please visit our installation forums for more information. Installing a web server Installing a typical web server environment is very easy with following AMP-packages (Apache, MySQL, PHP). XAMPP (Multiple OS) XAMPP (for Joomla 1.5 and 2.5 please view XAMPP for Joomla 2.5) LAMP (Linux) Configuring a LAMPP server for PHP development WAMP (Windows),. A good choice for for a local server environment for windows is WampServer. MAMP (Macintosh / OS X) MAMP by living-e AG may be a good choice. Bitnami also offer a Joomla stack that you can install locally or on a remote server If you want use XDebug for debugging, you'll need to tune php settings Edit PHP.INI File for XDebug Installing an IDE / Editor (and debugging) Visual Studio Code Configuring Visual Studio Code for joomla development PhpStorm IDE Joomla! Development with PhpStorm Eclipse IDE Configuring Eclipse for joomla development How to configure Eclipse IDE for PHP development Configuring Eclipse IDE for PHP development Using Eclipse for Joomla! Development Video webinar demonstrating overview of Eclipse features for Joomla! development Komodo Edit Configuring Komodo Edit for Joomla Code Completion NetBeans NetBeans overview UltraEdit, Notepad++, ... Sublime Text 2 Editor Perfect Workflow in Sublime Text 2 tutorial Debugging specifics Running Automated Tests for the Joomla CMS How to debug your code Using Git The CMS project uses the Git version control system and the CMS repository is stored on Github here: https://github.com/joomla/joomla-cms. Bugs are fixed in the master branch of this repository, and normally there are bug fixes and changes in the master branch that are more recent than the latest released Joomla version. For this reason, when we test and code bug fixes, we normally use the latest code from the master branch on Github, not the latest released version. Therefore, Bug Squad testers and coders need to understand how to use Git and the Github repository. For testing and tracking changes, please refer to Git for Testers and Trackers. For creating your first code change (called a Pull Request) please see Working with git and github/My first pull request For working with git, please see Git for Coders. Related Setting up your workstation for PHP development Joomla Issue shortcut Browser Shortcut Issue Tracker Setting up your local environment for Joomla 4 Help is appreciated finding related pages and making these pages less redundant.","title":"Workstation setup"},{"location":"getting-started/workstation/#installing-a-web-server","text":"Installing a typical web server environment is very easy with following AMP-packages (Apache, MySQL, PHP).","title":"Installing a web server"},{"location":"getting-started/workstation/#xampp-multiple-os","text":"XAMPP (for Joomla 1.5 and 2.5 please view XAMPP for Joomla 2.5)","title":"XAMPP (Multiple OS)"},{"location":"getting-started/workstation/#lamp-linux","text":"Configuring a LAMPP server for PHP development","title":"LAMP (Linux)"},{"location":"getting-started/workstation/#wamp-windows-a-good-choice-for-for-a-local-server-environment-for-windows-is-wampserver","text":"","title":"WAMP (Windows),. A good choice for for a local server environment for windows is WampServer."},{"location":"getting-started/workstation/#mamp-macintosh-os-x-mamp-by-living-e-ag-may-be-a-good-choice","text":"","title":"MAMP (Macintosh / OS X) MAMP by living-e AG may be a good choice."},{"location":"getting-started/workstation/#bitnami-also-offer-a-joomla-stack-that-you-can-install-locally-or-on-a-remote-server","text":"If you want use XDebug for debugging, you'll need to tune php settings Edit PHP.INI File for XDebug","title":"Bitnami also offer a Joomla stack that you can install locally or on a remote server"},{"location":"getting-started/workstation/#installing-an-ide-editor-and-debugging","text":"","title":"Installing an IDE / Editor (and debugging)"},{"location":"getting-started/workstation/#visual-studio-code","text":"Configuring Visual Studio Code for joomla development","title":"Visual Studio Code"},{"location":"getting-started/workstation/#phpstorm-ide","text":"Joomla! Development with PhpStorm","title":"PhpStorm IDE"},{"location":"getting-started/workstation/#eclipse-ide","text":"Configuring Eclipse for joomla development How to configure Eclipse IDE for PHP development Configuring Eclipse IDE for PHP development Using Eclipse for Joomla! Development Video webinar demonstrating overview of Eclipse features for Joomla! development","title":"Eclipse IDE"},{"location":"getting-started/workstation/#komodo-edit","text":"Configuring Komodo Edit for Joomla Code Completion","title":"Komodo Edit"},{"location":"getting-started/workstation/#netbeans","text":"NetBeans overview","title":"NetBeans"},{"location":"getting-started/workstation/#ultraedit-notepad","text":"","title":"UltraEdit, Notepad++, ..."},{"location":"getting-started/workstation/#sublime-text-2-editor","text":"Perfect Workflow in Sublime Text 2 tutorial","title":"Sublime Text 2 Editor"},{"location":"getting-started/workstation/#debugging-specifics","text":"Running Automated Tests for the Joomla CMS How to debug your code","title":"Debugging specifics"},{"location":"getting-started/workstation/#using-git","text":"The CMS project uses the Git version control system and the CMS repository is stored on Github here: https://github.com/joomla/joomla-cms. Bugs are fixed in the master branch of this repository, and normally there are bug fixes and changes in the master branch that are more recent than the latest released Joomla version. For this reason, when we test and code bug fixes, we normally use the latest code from the master branch on Github, not the latest released version. Therefore, Bug Squad testers and coders need to understand how to use Git and the Github repository. For testing and tracking changes, please refer to Git for Testers and Trackers. For creating your first code change (called a Pull Request) please see Working with git and github/My first pull request For working with git, please see Git for Coders.","title":"Using Git"},{"location":"getting-started/workstation/#related","text":"Setting up your workstation for PHP development Joomla Issue shortcut Browser Shortcut Issue Tracker Setting up your local environment for Joomla 4 Help is appreciated finding related pages and making these pages less redundant.","title":"Related"}]}